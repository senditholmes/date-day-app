generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cafes {
  cafeId      Int       @id @default(autoincrement())
  cafeName    String    @unique(map: "cafeName") @db.VarChar(30)
  address     String?   @db.VarChar(30)
  addressLink String?   @db.VarChar(200)
  openingHour DateTime? @db.Time(0)
  closingHour DateTime? @db.Time(0)
  ratings     ratings[]
}

model ratings {
  ratingId       Int       @id @default(autoincrement())
  authorName     String    @db.VarChar(30)
  cafeId         Int
  atmosphere     String?   @db.VarChar(30)
  service        String?   @db.VarChar(30)
  taste          String?   @db.VarChar(30)
  americanoPrice Int?      @db.MediumInt
  cakePrice      Int?      @db.MediumInt
  overallScore   Int?      @db.TinyInt
  visitDate      DateTime? @db.Date
  cafes          cafes     @relation(fields: [cafeId], references: [cafeId], onDelete: NoAction, onUpdate: NoAction, map: "ratings_ibfk_1")

  @@index([cafeId], map: "cafeId")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  password      String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
